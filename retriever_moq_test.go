// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gremgo

import (
	"context"
	"sync"
)

var (
	lockRetrieverMockretrieveNextResponseCtx sync.RWMutex
)

// Ensure, that RetrieverMock does implement Retriever.
// If this is not the case, regenerate this file with moq.
var _ Retriever = &RetrieverMock{}

// RetrieverMock is a mock implementation of Retriever.
//
//     func TestSomethingThatUsesRetriever(t *testing.T) {
//
//         // make and configure a mocked Retriever
//         mockedRetriever := &RetrieverMock{
//             retrieveNextResponseCtxFunc: func(ctx context.Context, cursor *Cursor) ([]Response, bool, error) {
// 	               panic("mock out the retrieveNextResponseCtx method")
//             },
//         }
//
//         // use mockedRetriever in code that requires Retriever
//         // and then make assertions.
//
//     }
type RetrieverMock struct {
	// retrieveNextResponseCtxFunc mocks the retrieveNextResponseCtx method.
	retrieveNextResponseCtxFunc func(ctx context.Context, cursor *Cursor) ([]Response, bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// retrieveNextResponseCtx holds details about calls to the retrieveNextResponseCtx method.
		retrieveNextResponseCtx []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cursor is the cursor argument value.
			Cursor *Cursor
		}
	}
}

// retrieveNextResponseCtx calls retrieveNextResponseCtxFunc.
func (mock *RetrieverMock) retrieveNextResponseCtx(ctx context.Context, cursor *Cursor) ([]Response, bool, error) {
	if mock.retrieveNextResponseCtxFunc == nil {
		panic("RetrieverMock.retrieveNextResponseCtxFunc: method is nil but Retriever.retrieveNextResponseCtx was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Cursor *Cursor
	}{
		Ctx:    ctx,
		Cursor: cursor,
	}
	lockRetrieverMockretrieveNextResponseCtx.Lock()
	mock.calls.retrieveNextResponseCtx = append(mock.calls.retrieveNextResponseCtx, callInfo)
	lockRetrieverMockretrieveNextResponseCtx.Unlock()
	return mock.retrieveNextResponseCtxFunc(ctx, cursor)
}

// retrieveNextResponseCtxCalls gets all the calls that were made to retrieveNextResponseCtx.
// Check the length with:
//     len(mockedRetriever.retrieveNextResponseCtxCalls())
func (mock *RetrieverMock) retrieveNextResponseCtxCalls() []struct {
	Ctx    context.Context
	Cursor *Cursor
} {
	var calls []struct {
		Ctx    context.Context
		Cursor *Cursor
	}
	lockRetrieverMockretrieveNextResponseCtx.RLock()
	calls = mock.calls.retrieveNextResponseCtx
	lockRetrieverMockretrieveNextResponseCtx.RUnlock()
	return calls
}
